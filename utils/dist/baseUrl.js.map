{"version":3,"sources":["baseUrl.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAA6F;AAE7F,kDAAkD;AAElD,IAAM,OAAO,GAAG,sCAAsC,CAAC;AAG1C,QAAA,YAAY,GAAG;IAC1B,IAAI,iBAAoC,CAAC;IAEzC,OAAO,UAAO,EAAsD;YAApD,YAAG,EAAE,YAAW,EAAX,gCAAW,EAAE,cAAc,EAAd,mCAAc;;;;;;wBAC9C,uCAAuC;wBACvC,IAAI,iBAAiB,EAAE;4BACrB,sDAAsD;4BACtD,iBAAiB,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC;yBACpE;wBAED,2BAA2B;wBAC3B,iBAAiB,GAAG,kBAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;;;;wBAGvC,MAAM,GAAuB;4BACjC,GAAG,KAAA;4BACH,MAAM,QAAA;4BACN,IAAI,MAAA;4BACJ,WAAW,EAAE,iBAAiB,CAAC,KAAK;yBACrC,CAAC;wBAEmC,qBAAM,kBAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAA;;wBAA1D,QAAQ,GAAuB,SAA2B;wBAChE,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;wBAErB,IAAI,gBAAQ,CAAC,OAAK,CAAC,EAAE;4BACnB,qCAAqC;4BACrC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;yBACjD;6BAAM;4BACL,sBAAsB;4BACtB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;yBACrD;;;;;;KAEJ,CAAC;AACJ,CAAC,CAAC;AAEF,SAAgB,gBAAgB,CAAC,IAAS;IACxC,IAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC,EAAE,CAAA;IAE1I,IAAM,aAAa,kBAAO,MAAM,CAAC,CAAC;IAElC,IAAI,CAAC,OAAO,CAAC,UAAC,IAAS;QACb,IAAA,cAAG,EAAE,kBAAK,CAAU;QAC5B,IAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,UAAU,CAAI,GAAG,MAAG,CAAC,EAA3B,CAA2B,CAAC,CAAC;QAEnF,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB,aAAa,CAAC,UAAU,CAAC,GAAM,GAAG,SAAI,KAAO,CAAC;SAC/C;aAAM;YACL,aAAa,CAAC,IAAI,CAAI,GAAG,SAAI,KAAO,CAAC,CAAC;SACvC;IACH,CAAC,CAAC,CAAC;IAEH,OAAU,MAAM,CAAC,QAAQ,CAAC,QAAQ,SAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;AAClE,CAAC;AAjBD,4CAiBC;AACD,SAAgB,YAAY,CAAC,UAAkB,EAAE,gBAAwB,EAAC,gBAAwB;IAEhG,qBAAqB;IACrB,IAAM,QAAQ,GAAG,UAAU,GAAG,gBAAgB,CAAC;IAE/C,wBAAwB;IACxB,IAAM,QAAQ,GAAG,QAAQ,GAAG,gBAAgB,CAAC;IAE7C,yCAAyC;IACzC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AAC1C,CAAC;AAVD,oCAUC;AACD,qBAAe,OAAO,CAAC","file":"baseUrl.js","sourcesContent":["import axios, {AxiosRequestConfig, AxiosResponse, CancelTokenSource, isCancel,} from \"axios\";\r\n\r\n// const baseUrl = \"http://localhost:3000/v1/api\";\r\n\r\nconst baseUrl = \"https://api.supersconto24.com/v1/api\";\r\n\r\ntype AxiosRequestType = { url: string; data?: any; method?: string };\r\nexport const axiosRequest = () => {\r\n  let cancelTokenSource: CancelTokenSource;\r\n\r\n  return async ({ url, data = null, method = \"get\" }: AxiosRequestType) => {\r\n    // Check if a previous request was made\r\n    if (cancelTokenSource) {\r\n      // Cancel the previous request before making a new one\r\n      cancelTokenSource.cancel(\"Request canceled due to a new request.\");\r\n    }\r\n\r\n    // Create a new CancelToken\r\n    cancelTokenSource = axios.CancelToken.source();\r\n\r\n    try {\r\n      const config: AxiosRequestConfig = {\r\n        url,\r\n        method,\r\n        data,\r\n        cancelToken: cancelTokenSource.token,\r\n      };\r\n\r\n      const response: AxiosResponse<any> = await axios.request(config);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      if (isCancel(error)) {\r\n        // Handle if the request was canceled\r\n        console.log(\"Request canceled:\", error.message);\r\n      } else {\r\n        // Handle other errors\r\n        console.log(\"Something went wrong:\", error.message);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport function updateParamValue(data: any) {\r\n  const params = window.location.href.indexOf(\"?\") !== -1 ? window.location.href.slice(window.location.href.indexOf(\"?\") + 1).split(\"&\"): []\r\n\r\n  const updatedParams = [...params];\r\n\r\n  data.forEach((item: any) => {\r\n    const { key, value } = item;\r\n    const paramIndex = updatedParams.findIndex((param) => param.startsWith(`${key}=`));\r\n\r\n    if (paramIndex !== -1) {\r\n      updatedParams[paramIndex] = `${key}=${value}`;\r\n    } else {\r\n      updatedParams.push(`${key}=${value}`);\r\n    }\r\n  });\r\n\r\n  return `${window.location.pathname}?${updatedParams.join(\"&\")}`;\r\n}\r\nexport function convertPrice(priceLocal: number, localBasedOneUSD: number,targetBasedOnUSD: number) {\r\n\r\n  // Convert EUR to USD\r\n  const priceUSD = priceLocal / localBasedOneUSD;\r\n\r\n  // Convert USD to Target\r\n  const priceLKR = priceUSD * targetBasedOnUSD;\r\n\r\n  // Round the result to two decimal places\r\n  return Math.round(priceLKR * 100) / 100;\r\n}\r\nexport default baseUrl;\r\n"]}